{% set build_num = 2 %}
{% set gcc_major = 13 if ctng_gcc is undefined else ctng_gcc.split(".")[0] %}
# generally, the runtime version of libstdcxx needs to be at least as high
# as the compiler; however, wherever libstdcxx changes the default ABI version
# of a symbol, we need to ensure at least that version at runtime also for
# packages built with older compilers (because that build environment will
# pull in the newest libstdcxx, and then depend on that new symbol version).
# C.f. https://johannst.github.io/notes/development/symbolver.html resp.
# check if some symbol changed ABI (and thus got reversioned) at the bottom of
# https://gcc.gnu.org/onlinedocs/libstdc++/manual/api.html
{% set min_runtime_version = gcc_major if gcc_major|int >= 13 else 12 %}

package:
  name: ctng-compiler-activation
  version: {{ ctng_gcc }}

source:
  path: .

build:
  number: {{ build_num }}
  skip: true  # [win]

requirements:
  build:
    - shellcheck  # [not (aarch64 or ppc64le)]

outputs:
  - name: gcc_{{ cross_target_platform }}
    build:
      skip: true  # [not linux]
    script: install-gcc.sh
    requirements:
      run:
        - gcc_impl_{{ target_platform }} {{ ctng_gcc }}.*
        - gcc_impl_{{ cross_target_platform }} {{ ctng_gcc }}.*
        # for activation of binutils env vars
        - {{ pin_subpackage("binutils_" ~ cross_target_platform, exact=True) }}
        - sysroot_{{ target_platform }}
        - sysroot_{{ cross_target_platform }}
    run_exports:
      strong:
        - libgcc-ng >={{ min_runtime_version }}
    test:
      requires:
        - sysroot_{{ cross_target_platform }} {{ conda_glibc_ver }}
      files:
        - tests
      commands:
        - echo {{ linux_machine }}
        - ${CC} ${CFLAGS} -Wall tests/aligned_alloc.c -c -o c_aligned.o -v
        - ${CC} ${LDFLAGS} c_aligned.o -o c_aligned     # [target_platform == cross_target_platform]
        - ./c_aligned                                   # [target_platform == cross_target_platform]
        # CONDA_BUILD_SYSROOT is defined for clang++ to find correct C++ headers, see issue 8
        - test -z "${CONDA_BUILD_SYSROOT+x}" && echo "CONDA_BUILD_SYSROOT is not set" && exit 1
        - test -d ${CONDA_BUILD_SYSROOT} || exit 1
    about:
      summary: GNU C Compiler (activation scripts)
      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock
      license: BSD-3-Clause
      license_file: LICENSE

  - name: clang_{{ cross_target_platform }}
    version: {{ clang_version }}
    script: install-clang.sh
    build:
      skip: true  # [win or s390x or cross_target_platform == "linux-s390x"]
    requirements:
      run:
        - libgcc-devel_{{ cross_target_platform }} {{ ctng_gcc }}.*
        # for activation of binutils env vars
        - {{ pin_subpackage("binutils_" ~ cross_target_platform, exact=True) }}
        - sysroot_{{ cross_target_platform }}
        - compiler-rt_{{ cross_target_platform }}
        - compiler-rt
        - clang_impl_{{ target_platform }}  {{ clang_version }}   # [osx]
    run_exports:
      strong:
        - libgcc-ng >={{ min_runtime_version }}
    test:
      requires:
        - sysroot_{{ cross_target_platform }} {{ conda_glibc_ver }}
      files:
        - tests
      commands:
        - echo {{ linux_machine }}
        - ${CC} ${CFLAGS} -Wall tests/aligned_alloc.c -c -o c_aligned.o -v
        - ${CC} ${LDFLAGS} c_aligned.o -o c_aligned     # [target_platform == cross_target_platform]
        - ./c_aligned                                   # [target_platform == cross_target_platform]
        # CONDA_BUILD_SYSROOT is defined for clang++ to find correct C++ headers, see issue 8
        - test -z "${CONDA_BUILD_SYSROOT+x}" && echo "CONDA_BUILD_SYSROOT is not set" && exit 1
        - test -d ${CONDA_BUILD_SYSROOT} || exit 1
    about:
      summary: Clang Compiler (activation scripts)
      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock
      license: BSD-3-Clause
      license_file: LICENSE

  - name: gcc
    script: install-symlinks.sh
    build:
      skip: true  # [target_platform != cross_target_platform]
      skip: true  # [not linux]
    requirements:
      - gcc_impl_{{ target_platform }} {{ ctng_gcc }}.*
    run_exports:
      strong:
        - libgcc-ng >={{ min_runtime_version }}
    test:
      commands:
        - ${PREFIX}/bin/gcc -v
        - ${PREFIX}/bin/gcov -v
    about:
      summary: GNU C native compiler (symlinks)
      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock
      license: BSD-3-Clause
      license_file: LICENSE

  - name: gxx_{{ cross_target_platform }}
    script: install-g++.sh
    build:
      skip: true  # [not linux]
    requirements:
      run:
        - gxx_impl_{{ target_platform }} {{ ctng_gcc }}.*
        - gxx_impl_{{ cross_target_platform }} {{ ctng_gcc }}.*
        # for activation of gcc env vars
        - {{ pin_subpackage("gcc_" ~ cross_target_platform, exact=True) }}
        # for activation of binutils env vars
        - {{ pin_subpackage("binutils_" ~ cross_target_platform, exact=True) }}
        - sysroot_{{ cross_target_platform }}
    test:
      requires:
        - sysroot_{{ cross_target_platform }} {{ conda_glibc_ver }}
      files:
        - tests
      commands:
        - ${CXX} ${CXXFLAGS} -Wall tests/aligned_alloc.cpp -c -o cpp_aligned.o
        - ${CXX} ${LDFLAGS} cpp_aligned.o -o cpp_aligned    # [target_platform == cross_target_platform]
        - ./cpp_aligned                                     # [target_platform == cross_target_platform]
        - test -z "${CONDA_BUILD_SYSROOT+x}" && echo "CONDA_BUILD_SYSROOT is not set" && exit 1
        - test -d ${CONDA_BUILD_SYSROOT} || exit 1
    run_exports:
      strong:
        # This should be a transitive dependency, but conda-build doesn't support those
        - libstdcxx-ng >={{ min_runtime_version }}
        # Because transitive run_exports do not work:
        - libgcc-ng >={{ min_runtime_version }}
    about:
      summary: GNU C++ Compiler (activation scripts)
      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock
      license: BSD-3-Clause
      license_file: LICENSE

  - name: gxx
    script: install-symlinks.sh
    build:
      skip: true  # [target_platform != cross_target_platform]
      skip: true  # [not linux]
    requirements:
      - gxx_impl_{{ target_platform }} {{ ctng_gcc }}.*
      - gcc {{ ctng_gcc }}.*
    run_exports:
      strong:
        - libstdcxx-ng >={{ min_runtime_version }}
        # Because transitive run_exports do not work:
        - libgcc-ng >={{ min_runtime_version }}
    test:
      commands:
        - ${PREFIX}/bin/g++ -v
        - ${PREFIX}/bin/gcc -v
    about:
      summary: GNU C++ native compiler (symlinks)
      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock
      license: BSD-3-Clause
      license_file: LICENSE

  - name: gfortran_{{ cross_target_platform }}
    script: install-gfortran.sh
    build:
      skip: true  # [not linux]
    requirements:
      host:
        # So that pin_compatible has something to work with:
        - libgfortran{{ libgfortran_soname }} {{ ctng_gcc }}.*
        - libgfortran-ng  {{ ctng_gcc }}.*
      run:
        - gfortran_impl_{{ cross_target_platform }} {{ ctng_gcc }}.*
        - gfortran_impl_{{ target_platform }} {{ ctng_gcc }}.*
        # for activation of gcc env vars:
        - {{ pin_subpackage("gcc_" ~ cross_target_platform, exact=True) }}
        # for activation of binutils env vars:
        - {{ pin_subpackage("binutils_" ~ cross_target_platform, exact=True) }}
        - sysroot_{{ cross_target_platform }}
    run_exports:
      strong:
        - libgfortran{{ libgfortran_soname }} >={{ ctng_gcc }}
        - libgfortran-ng
        # Because transitive run_exports do not work:
        - libgcc-ng >={{ min_runtime_version }}
    test:
      requires:
        - cmake >=3.11  # [x86_64 or aarch64 or ppc64le]
        - make          # [x86_64 or aarch64 or ppc64le]
        - sysroot_{{ cross_target_platform }} {{ conda_glibc_ver }}
      commands:
        - ${FC} --version
        - pushd tests/fortomp
        - sh test_fort.sh       # [target_platform == cross_target_platform and (x86_64 or aarch64 or ppc64le)]
      files:
        - tests/fortomp/*
    about:
      summary: GNU Fortran Compiler (activation scripts)
      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock
      license: BSD-3-Clause
      license_file: LICENSE

  - name: gfortran
    script: install-symlinks.sh
    build:
      skip: true  # [target_platform != cross_target_platform]
      skip: true  # [not linux]
    requirements:
      - gfortran_impl_{{ target_platform }} {{ ctng_gcc }}.*
      - gcc_impl_{{ target_platform }} {{ ctng_gcc }}.*
      - gcc {{ ctng_gcc }}.*
    run_exports:
      strong:
        # Because transitive run_exports do not work:
        - libgfortran{{ libgfortran_soname }} >={{ ctng_gcc }}
        - libgfortran-ng
        # Because transitive run_exports do not work:
        - libgcc-ng >={{ min_runtime_version }}
    test:
      commands:
        - ${PREFIX}/bin/gfortran -v
        - ${PREFIX}/bin/gcc -v
    about:
      summary: GNU Fortran native compiler (symlinks)
      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock
      license: BSD-3-Clause
      license_file: LICENSE

  - name: binutils_{{ cross_target_platform }}
    version: "{{ ctng_binutils }}"
    script: install-binutils.sh
    requirements:
      run:
        - binutils_impl_{{ cross_target_platform }} {{ ctng_binutils }}.*
        - sysroot_{{ target_platform }}       # [linux]
        - sysroot_{{ cross_target_platform }}
    test:
      requires:
        - sysroot_{{ cross_target_platform }} {{ conda_glibc_ver }}
      commands:
        - test -f $LD
    about:
      summary: The GNU Binutils are a collection of binary tools (activation scripts)
      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock
      license: BSD-3-Clause
      license_file: LICENSE

  - name: gcc_bootstrap_{{ cross_target_platform }}
    version: "{{ ctng_gcc }}"
    build:
      skip: true  # [not linux]
      binary_relocation: false
      detect_binary_files_with_prefix: false
      always_include_files:
        - bin/
        - etc/
        - lib64/
        - lib/
        - libexec/
        - share/
        - {{ ctng_cpu_arch }}-{{ ctng_vendor }}-linux-gnu/
    requirements:
      host:
        - binutils_impl_{{ cross_target_platform }} {{ ctng_binutils }}.*
        - gfortran_impl_{{ cross_target_platform }} {{ ctng_gcc }}.*
        - gxx_impl_{{ cross_target_platform }} {{ ctng_gcc }}.*
        - gcc_impl_{{ cross_target_platform }} {{ ctng_gcc }}.*
    test:
      commands:
        - test -f $PREFIX/bin/{{ ctng_cpu_arch }}-{{ ctng_vendor }}-linux-gnu-cc
    about:
      summary: GCC bootstrap compilers for building deps
      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock
      license: GPL
      license_file: GPL_LICENSE

about:
  summary: Activation scripts for gcc, g++, gfortran and binutils
  home: https://github.com/conda-forge/ctng-compiler-activation-feedstock
  license: BSD-3-Clause
  license_file: LICENSE

extra:
  recipe-maintainers:
    - isuruf
    - beckermr
